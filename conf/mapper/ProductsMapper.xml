<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="mapper.ProductsMapper">

    <!--enable mybatis default cache configure reference:
        https://mybatis.github.io/mybatis-3/zh/sqlmap-xml.html#cache
    -->

    <sql id="productsColumns">
        ${alias}.id,
        ${alias}.merch_uid merchId,
        ${alias}.merch_nm merchName,
        ${alias}.lang lan,
        ${alias}.cate_id,
        ${alias}.cate_nm cateName,
        ${alias}.brand_id,
        ${alias}.brand_nm brandName,
        ${alias}.prod_nm productName,
        ${alias}.prod_color productColor,
        ${alias}.prod_size productSize,
        ${alias}.prod_desc productDesc,
        ${alias}.store_area storeArea,
        ${alias}.src_area sourceArea,
        ${alias}.sell_on_at sellOnDate,
        ${alias}.sell_off_at sellOffDate,
        ${alias}.prod_amount productAmount,
        ${alias}.prod_price productPrice,
        ${alias}.recommend_price recommendPrice,
        ${alias}.prod_master_img masterImg,
        ${alias}.prod_preview_imgs previewImgs,
        ${alias}.prod_detail_imgs detailImgs,
        ${alias}.prod_features features,
        ${alias}.state productState,
        ${alias}.or_destory destory,
        ${alias}.destory_uid,
        ${alias}.update_at,
        ${alias}.update_uid,
        ${alias}.create_at,
        ${alias}.create_uid
    </sql>

    <select id="getProducts" resultType="entity.Products" parameterType="java.lang.Long">
        select
        id,merch_uid merchId,merch_nm merchName,prod_nm productName,brand_id,cate_id,prod_color productColor,prod_size productSize,prod_desc productDesc,
            store_area storeArea,src_area sourceArea,prod_amount productAmount,prod_price productPrice,recommend_price recommendPrice,prod_master_img masterImg,
            prod_preview_imgs previewImgs,prod_detail_imgs detailImgs,prod_features features,sell_on_at sellOnDate,sell_off_at sellOffDate,state productState,
        case when lang='cn' then (select brand_nm_cn from brands where brand_id=t.brand_id)
        when lang='en' then (select brand_nm_en from brands where brand_id=t.brand_id)
        else (select brand_nm_kr from brands where brand_id=t.brand_id)
        END as brandName,
        case when lang='cn' then (select cate_nm_cn from cates where cate_id=t.cate_id)
        when lang='en' then (select cate_nm_en from cates where cate_id=t.cate_id)
        else (select cate_nm_kr from cates where cate_id=t.cate_id)
        END as cateName
        from prods t where id=${value}
    </select>

    <select id="getAllProducts" parameterType="entity.Products" resultType="entity.Products">
        select
        id,prod_nm productName,merch_nm merchName,brand_id,cate_id,prod_master_img masterImg,
        sell_on_at sellOnDate,sell_off_at sellOffDate,prod_price productPrice,recommend_price recommendPrice,state productState,
        CASE WHEN lang='cn' THEN (select brand_nm_cn brandName from brands where brand_id=t.brand_id)
        WHEN lang='en' THEN (select brand_nm_en from brands where brand_id=t.brand_id)
        ELSE (select brand_nm_kr from brands where brand_id=t.brand_id)
        END as brandName,
        CASE when lang='cn' THEN (select cate_nm_cn cateName from cates where cate_id=t.cate_id)
        WHEN lang='en' THEN (select cate_nm_en from cates where cate_id=t.cate_id)
        ELSE (select cate_nm_kr from cates where cate_id=t.cate_id)
        END as cateName

        from prods t where 1=1
        <if test="id != null">
            and t.id = #{id}
        </if>
        <if test='productName != null and productName != "null" and productName != "" '>
            and t.prod_nm = #{productName}
        </if>
        <if test='sellOnDate != null'>
            and t.sell_on_at &gt;= #{sellOnDate} ::timestamp
        </if>
        <if test='sellOffDate != null'>
            and t.sell_off_at &lt;= #{sellOffDate} ::timestamp
        </if>
        <if test="sort == null or sort == '' or sort == 'null' ">
            ORDER BY t.id DESC, t.prod_nm
        </if>

        <if test="sort != null and sort != '' and sort != 'null' ">
            ORDER BY t.${sort}
            <if test="order != null">
                ${order}
            </if>
        </if>
        <if test="pageSize == -1 and offset >= -1">
            LIMIT ALL OFFSET 0
        </if>
        <if test="pageSize >= 1 and offset >= 0">
            LIMIT #{pageSize} OFFSET #{offset}
        </if>
    </select>

    <insert id="insertProducts" parameterType="entity.Products" useGeneratedKeys="true" keyProperty="id">
        insert into prods
        (merch_uid,merch_nm,lang,cate_id,cate_nm,brand_id,brand_nm,prod_nm,prod_color,prod_size,prod_desc,store_area,src_area,sell_on_at,sell_off_at,prod_amount,prod_price,recommend_price,prod_master_img,prod_preview_imgs,prod_detail_imgs,prod_features,state,or_destory,destory_uid,update_at,update_uid,create_at,create_uid)
        values
        (#{merchId},#{merchName},#{language},#{cateId},#{cateName},#{brandId},#{brandName},#{productName},#{productColor},#{productSize},#{productDesc},#{storeArea},#{sourceArea},#{sellOnDate},#{sellOffDate},#{productAmount},#{productPrice},#{recommendPrice},#{masterImg},#{previewImgs},#{detailImgs},#{features},#{productState},#{destory},#{destoryUid},#{updateDate},#{updateUid},CURRENT_TIMESTAMP(0),#{createUid})
    </insert>
</mapper>
